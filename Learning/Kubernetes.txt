#kubectl run mywebserver --image=nginx ( to create pod)
#Kubectl get pods  
#kubectl exec -it mywebserver -- bash ( to go inside the pod)
#kubectl delete pod mywebserver

=========================================================================Kubenetes Compnenets========================================
ETCD: 
Key Value stores as used kubernetes Backing store for all cluster data.

API Server:
Component on the master that exposes the kubernetes API.

kube-Scheduler:
Compnent on the master that watches newly created pods that have no node assigned and select a node for them to run on.
 
Controller Manager:
Responsible for controlling various aspects, including: Node controller: Respnsible when node goes down. 
Replication Controllers, endpoint controllers, service account & Tocken controllers.


Cloud Controller Manager:
Runs controllers that intract with underlying cloud providers.


=================================================================ETCD - Commands (Optional)===========================================


Default port:2379

Two ways to configure the kubernetes cluster:
Manual
kubedem

(Optional) Additional information about ETCDCTL Utility

ETCDCTL is the CLI tool used to interact with ETCD.

ETCDCTL can interact with ETCD Server using 2 API versions - Version 2 and Version 3. 
By default its set to use Version 2. Each version has different sets of commands.

For example ETCDCTL version 2 supports the following commands:

#etcdctl backup
#etcdctl cluster-health
#etcdctl mk
#etcdctl mkdir
#etcdctl set


Whereas the commands are different in version 3

#etcdctl snapshot save 
#etcdctl endpoint health
#etcdctl get
#etcdctl put

To set the right version of API set the environment variable ETCDCTL_API command

#export ETCDCTL_API=3



When API version is not set, it is assumed to be set to version 2. And version 3 commands listed above don't work. When API version is set to version 3, version 2 commands listed above don't work.



Apart from that, you must also specify path to certificate files so that ETCDCTL can authenticate to the ETCD API Server. The certificate files are available in the etcd-master at the following path. We discuss more about certificates in the security section of this course. So don't worry if this looks complex:

--cacert /etc/kubernetes/pki/etcd/ca.crt     
--cert /etc/kubernetes/pki/etcd/server.crt     
--key /etc/kubernetes/pki/etcd/server.key


So for the commands I showed in the previous video to work you must specify the ETCDCTL API version and path to certificate files. Below is the final form:



#kubectl exec etcd-master -n kube-system -- sh -c "ETCDCTL_API=3 etcdctl get / --prefix --keys-only --limit=10 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key" 



================================================Setup Kubectl & Minikube=====================================================


curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
kubectl
curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
echo "$(<kubectl.sha256) kubectl" | sha256sum --check
chmod +x kubectl
sudo cp kubectl /usr/local/bin/
kubectl
kubectl version --client
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
minikube start
kubectl get po -A
kubectl get node
minikube dashboard
curl http://127.0.0.1:44485/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/
minikube dashboard
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
kubectl expose deployment hello-minikube --type=NodePort --port=8080
kubectl get services hello-minikube
kubectl get pod
minikube service hello-minikube
==================

kubectl run mywebserver --image=nginx   ( to create a pod)

Create Pod through YAML file:

vi pod.yaml
--------------------------------------
apiVersion: v1
kind: Pod
metadata:
        name: mywebserver
spec:
        containers:
                - name: mywebserver
                  image: nginx

--------------------------------------
kubectl apply -f pod.yaml   (to create pod)
kubectl delete -f pod.yaml  (to delete the pod)
kubectl get pod
kubectl exec -it mywebserver -- bash    ( to exec into pod)
kubectl delete pod mywebserver          ( to delete pod)
kubectl describe pod mywebserver        (to get the details of pod)
kubectl api-resources                   ( to get the available API-RESOURCES in kubernetes)
kubectl explain pod                     (specifications of pod)

---------------------------------------

https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/
---------------------------------------

POD: 

POD in kubernetes represents a group of one or more application containers, and some shared resources for those containers.
a single pod can have multiple container running.

Kube-scheduler:

Kube-scheduler watches newly created pod that have no node assigned, and select a node for them to run on.








