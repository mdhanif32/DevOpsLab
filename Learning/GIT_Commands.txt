Git Commands

git init
This command is used to start a new repository.
Usage: git init [repository name]


git config
This command sets the author name and email address respectively to be used with your commits.
Usage: git config –global user.name “[name]”
Usage: git config –global user.email “[email address]”

git add
This command adds a file to the staging area
Usage: git add [file]

Usage: git add *  
This command adds one or more to the staging area.

usage: "git restore --staged <file>" to unstage
git reset HEAD <file>


git commit
This command records or snapshots the file permanently in the version history.
Usage: git commit -m “[ Type in the commit message]”  


Usage: git commit -a 
This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.


git diff
This command shows the file differences which are not yet staged.
Usage: git diff 

Usage: git diff –-staged 
This command shows the differences between the files in the staging area and the latest version present.

Usage: git diff [first branch] [second branch]
This command shows the differences between the two branches mentioned.


git reset
git reset [file] 
This command unstages the file, but it preserves the file contents.

git pull into wrong branch
git reset --hard 

git clone
This command is used to obtain a repository from an existing URL.
Usage: git clone [url]

git clone -b develop https://github.com/anujdevopslearn/MavenBuild MavenBuild_develop 

git status
This command lists all the files that have to be committed.


git rm
Usage: git rm [file] 
This command deletes the file from your working directory and stages the deletion.

git log
Usage: git log  
This command is used to list the version history for the current branch.

Usage: git log –follow[file]  
This command lists version history for a file, including the renaming of files also.


git show
Usage: git show [commit]  
This command shows the metadata and content changes of the specified commit.


git tag
Usage: git tag [commitID]  
This command is used to give tags to the specified commit.

git tag -a {tagname} {commit-id} -m "Message here"

git tag -a {tagname} {commit-id}

git tag {tagname} {commit-id}

============================================
git branch
Usage: git branch  
This command lists all the local branches in the current repository.

Usage: git branch [branch name]  
This command creates a new branch.

Usage: git branch -d [branch name]  
This command deletes the feature branch.


git branch -l ==list of the branch
git branch -m release ==rename the current branch to new

git checkout
Usage: git checkout [branch name]  
This command is used to switch from one branch to another.

Usage: git checkout -b [branch name]  
This command creates a new branch and also switches to it.

git merge
Usage: git merge [branch name]  
This command merges the specified branch’s history into the current branch.

git checkout master
git pull origin master
git merge test
git push origin master
===================================

git remote add origin https://github.com/shvkmr536/shiv536.git(to connect with remote repository)

git push
Usage: git push [variable name] master  
This command sends the committed changes of master branch to your remote repository.

git pull -all 
to sync remote and local repo

git push --all origin

git log --author "shiv"
git log --author "shiv" abc.txt

git config --list

Usage: git push –all [variable name]  
This command pushes all branches to your remote repository.

Git push -u origin master
git push <remote> <commit hash>:<branch>


Usage: git pull [Repository Link]  
This command fetches and merges changes on the remote server to your working directory.
===============================================
git stash
Usage: git stash save  
This command temporarily stores all the modified tracked files.

Usage: git stash list  
This command lists all stashed changesets.

Usage: git stash show  
This command to show last stashed file

Usage: git stash pop 
This command restores the most recently stashed file.

Usage: git stash apply
This command restore all the stash files


Usage: git stash drop  
This command discards the most recently stashed changeset.

Usage: git stash clear
This command clear all stash entries

=============================================

git rm <filename> (to delete the file)
git log --oneline
git revert <fileid> (to revert the deleted file)

====Revert Last commit===
git reset --soft HEAD~1

====Restore last deleted file after commits===
git reset --soft HEAD~1
git restore --staged file1.txt
git restore file1.txt


What is Git merge
Git merge is a command that allows you to merge branches from Git.
Merging is a common practice for developers. Whether branches are created for testing, bug fixes, or other reasons, merging commits changes to another branch. It takes the contents of a source branch and integrates it with a target branch.


Will Git Merge Overwrite My Changes?
When you use Git merge, only the target branch is changed. The source branch history remains. Advocates of Git merge like it because it preserves the history of a branch. 

What Is Git Rebase?
Git rebase is a command that allows developers to integrate changes from one branch to another.

How Does Git Rebase Work?
Git rebase compresses all the changes into a single “patch.” Then it integrates the patch onto the target branch. Unlike merging, rebasing flattens history. It transfers the completed work from one branch to another. In the process, unwanted history is eliminated. 

Advocates of Git rebase like it because it simplifies their review process.

Git Rebase vs. Merge: Similarities and Differences:

Git rebase and merge both integrate changes from one branch into another. Where they differ is how it's done. Git rebase moves a feature branch into a master. Git merge adds a new commit, preserving the history.



